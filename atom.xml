<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-15T10:19:35.270Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 语言编程规范</title>
    <link href="http://yoursite.com/2020/01/15/Go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2020/01/15/Go-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</id>
    <published>2020-01-15T09:07:00.000Z</published>
    <updated>2020-01-15T10:19:35.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-语言编程规范"><a href="#Go-语言编程规范" class="headerlink" title="Go 语言编程规范"></a>Go 语言编程规范</h1><blockquote><p>本文翻译自 Uber 在 github 上面开源的 Go 语言编程规范了，原文在这里：&lt;<a href="https://github.com/uber-" target="_blank" rel="noopener">https://github.com/uber-</a><br>go/guide/blob/master/style.md&gt;</p></blockquote><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>英文原文标题是 <strong><em>Uber Go Style Guide</em></strong> ，这里的 Style 是指在管理我们代码的时候可以遵从的一些约定。</p><p>这篇编程指南的初衷是更好的管理我们的代码，包括去编写什么样的代码，以及不要编写什么样的代码。我们希望通过这份编程指南，代码可以具有更好的维护性，同时能够让我们的开发同学更高效地编写<br>Go 语言代码。</p><p>这份编程指南最初由 <a href="https://github.com/prashantv" target="_blank" rel="noopener">Prashant Varanasi</a> 和 <a href="https://github.com/nomis52" target="_blank" rel="noopener">Simon<br>Newton</a> 编写，旨在让其他同事快速地熟悉和编写 Go<br>程序。经过多年发展，现在的版本经过了多番修改和改进了。这是我们在 Uber 遵从的编程范式，但是很多都是可以通用的，如下是其他可以参考的链接：</p><ul><li><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="noopener">The Go common mistakes guide</a></li></ul><p>所有的提交代码都应该通过 <code>golint</code> 和 <code>go vet</code> 检测，建议在代码编辑器上面做如下设置：</p><ul><li>保存的时候运行 <code>goimports</code></li><li>使用 <code>golint</code> 和 <code>go vet</code> 去做错误检测。</li></ul><p>你可以通过下面链接发现更多的 Go 编辑器的插件:<br><a href="https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins" target="_blank" rel="noopener">https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins</a></p><h3 id="2-编程指南"><a href="#2-编程指南" class="headerlink" title="2. 编程指南"></a>2. 编程指南</h3><h4 id="2-1-指向-Interface-的指针"><a href="#2-1-指向-Interface-的指针" class="headerlink" title="2.1 指向 Interface 的指针"></a>2.1 指向 Interface 的指针</h4><p>在我们日常使用中，基本上不会需要使用指向 interface 的指针。当我们将 interface 作为值传递的时候，底层数据就是指针。Interface<br>包括两方面：</p><ul><li>一个包含 type 信息的指针</li><li>一个指向数据的指针</li></ul><p>如果你想要修改底层的数据，那么你只能使用 pointer。</p><h4 id="2-2-Receiver-和-Interface"><a href="#2-2-Receiver-和-Interface" class="headerlink" title="2.2 Receiver 和 Interface"></a>2.2 Receiver 和 Interface</h4><p>使用值作为 receiver 的时候 method 可以通过指针调用，也可以通过值来调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;  </span><br><span class="line">  data <span class="keyword">string</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s S)</span> <span class="title">Read</span><span class="params">()</span> <span class="title">string</span></span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> s.data  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *S)</span> <span class="title">Write</span><span class="params">(str <span class="keyword">string</span>)</span></span> &#123;  </span><br><span class="line">  s.data = str  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">sVals := <span class="keyword">map</span>[<span class="keyword">int</span>]S&#123;<span class="number">1</span>: &#123;<span class="string">"A"</span>&#125;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// You can only call Read using a value  </span></span><br><span class="line">sVals[<span class="number">1</span>].Read()  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// This will not compile:  </span></span><br><span class="line"><span class="comment">//  sVals[1].Write("test")  </span></span><br><span class="line">  </span><br><span class="line">sPtrs := <span class="keyword">map</span>[<span class="keyword">int</span>]*S&#123;<span class="number">1</span>: &#123;<span class="string">"A"</span>&#125;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// You can call both Read and Write using a pointer  </span></span><br><span class="line">sPtrs[<span class="number">1</span>].Read()  </span><br><span class="line">sPtrs[<span class="number">1</span>].Write(<span class="string">"test"</span>)</span><br></pre></td></tr></table></figure><p>相似的，pointer 也可以满足 interface 的要求，尽管 method 使用 value 作为 receiver。</p><pre><code>type F interface {    f()  }  type S1 struct{}  func (s S1) f() {}  type S2 struct{}  func (s *S2) f() {}  s1Val := S1{}  s1Ptr := &amp;S1{}  s2Val := S2{}  s2Ptr := &amp;S2{}  var i F  i = s1Val  i = s1Ptr  i = s2Ptr  // The following doesn&apos;t compile, since s2Val is a value, and there is no value receiver for f.  //   i = s2Val  </code></pre><p>Effective Go 关于如何使用指针和值也有一些不错的 practice： <a href="https://golang.org/doc/effective_go.html#pointers_vs_values" target="_blank" rel="noopener">Pointers vs.<br>Values</a>.</p><h4 id="2-3-mutex-默认-0-值是合法的"><a href="#2-3-mutex-默认-0-值是合法的" class="headerlink" title="2.3 mutex 默认 0 值是合法的"></a>2.3 mutex 默认 0 值是合法的</h4><p><code>sync.Mutex</code> 和 <code>sync.RWMutex</code> 的 0 值也是合法的，所以我们基本不需要声明一个指针指向 mutex。</p><p><strong>Bad</strong></p><pre><code>mu := new(sync.Mutex)  mu.Lock()  </code></pre><p><strong>Good</strong></p><pre><code>var mu sync.Mutex  mu.Lock()  </code></pre><p>如果 struct 内部使用 mutex，在我们使用 struct 的指针类型时候，mutex 也可以是一个非指针类型的 field，或者直接嵌套在<br>struct 中。</p><p>Mutex 直接嵌套在 struct 中。</p><pre><code>type smap struct {    sync.Mutex    data map[string]string  }  func newSMap() *smap {    return &amp;smap{      data: make(map[string]string),    }  }  func (m *smap) Get(k string) string {    m.Lock()    defer m.Unlock()    return m.data[k]  }  </code></pre><p>将 Mutex 作为一个 struct 内部一个非指针类型 Field 使用。</p><pre><code>type SMap struct {    mu sync.Mutex    data map[string]string  }  func NewSMap() *SMap {    return &amp;SMap{      data: make(map[string]string),    }  }  func (m *SMap) Get(k string) string {    m.mu.Lock()    defer m.mu.Unlock()    return m.data[k]  }  </code></pre><h4 id="2-4-拷贝-Slice-和-Map"><a href="#2-4-拷贝-Slice-和-Map" class="headerlink" title="2.4 拷贝 Slice 和 Map"></a>2.4 拷贝 Slice 和 Map</h4><p>Slice 和 Map 都包含了对底层存储数据的指针，所以注意在修改 slice 或者 map 数据的场景下，是不是使用了引用。</p><h5 id="slice-和-map-作为参数"><a href="#slice-和-map-作为参数" class="headerlink" title="slice 和 map 作为参数"></a>slice 和 map 作为参数</h5><p>当把 slice 和 map 作为参数的时候，如果我们对 slice 或者 map<br>的做了引用操作，那么修改会修改掉原始值。如果这种修改不是预期的，那么要先进行 copy。</p><p><strong>Bad</strong></p><pre><code>func (d *Driver) SetTrips(trips []Trip) {    d.trips = trips  }  trips := ...  d1.SetTrips(trips)  // Did you mean to modify d1.trips?  trips[0] = ...  </code></pre><p><strong>Good</strong></p><pre><code>func (d *Driver) SetTrips(trips []Trip) {    d.trips = make([]Trip, len(trips))    copy(d.trips, trips)  }  trips := ...  d1.SetTrips(trips)  // We can now modify trips[0] without affecting d1.trips.  trips[0] = ...  </code></pre><h5 id="slice-和-map-作为返回值"><a href="#slice-和-map-作为返回值" class="headerlink" title="slice 和 map 作为返回值"></a>slice 和 map 作为返回值</h5><p>当我们的函数返回 slice 或者 map 的时候，也要注意是不是直接返回了内部数据的引用到外部。</p><p><strong>Bad</strong></p><pre><code>type Stats struct {    sync.Mutex    counters map[string]int  }  // Snapshot returns the current stats.  func (s *Stats) Snapshot() map[string]int {    s.Lock()    defer s.Unlock()    return s.counters  }  // snapshot is no longer protected by the lock!  snapshot := stats.Snapshot()  </code></pre><p><strong>Good</strong></p><pre><code>type Stats struct {    sync.Mutex    counters map[string]int  }  func (s *Stats) Snapshot() map[string]int {    s.Lock()    defer s.Unlock()    result := make(map[string]int, len(s.counters))    for k, v := range s.counters {      result[k] = v    }    return result  }  // Snapshot is now a copy.  snapshot := stats.Snapshot()  </code></pre><h4 id="2-5-使用-defer-做资源清理"><a href="#2-5-使用-defer-做资源清理" class="headerlink" title="2.5 使用 defer 做资源清理"></a>2.5 使用 defer 做资源清理</h4><p>建议使用 defer 去做资源清理工作，比如文件，锁等。</p><p><strong>Bad</strong></p><pre><code>p.Lock()  if p.count &lt; 10 {    p.Unlock()    return p.count  }  p.count++  newCount := p.count  p.Unlock()  return newCount  // easy to miss unlocks due to multiple returns  </code></pre><p><strong>Good</strong></p><pre><code>p.Lock()  defer p.Unlock()  if p.count &lt; 10 {    return p.count  }  p.count++  return p.count  // more readable  </code></pre><p>尽管使用 defer 会导致一定的性能开销，但是大部分情况下这个开销在你的整个链路上所占的比重往往是微乎其微，除非说真的是有非常高的性能需求。另外使用<br>defer 带来的代码可读性的改进以及减少代码发生错误的概率都是值得的。</p><h4 id="2-6-channel-的-size-最好是-1-或者是-unbuffered"><a href="#2-6-channel-的-size-最好是-1-或者是-unbuffered" class="headerlink" title="2.6 channel 的 size 最好是 1 或者是 unbuffered"></a>2.6 channel 的 size 最好是 1 或者是 unbuffered</h4><p>在使用 channel 的时候，最好将 size 设置为 1 或者使用 unbuffered channel。其他 size 的 channel<br>往往都会引入更多的复杂度，需要更多考虑上下游的设计。</p><p><strong>Bad</strong></p><pre><code>// Ought to be enough for anybody!  c := make(chan int, 64)  </code></pre><p><strong>Good</strong></p><pre><code>// Size of one  c := make(chan int, 1) // or  // Unbuffered channel, size of zero  c := make(chan int)  </code></pre><h4 id="2-7-枚举变量应该从-1-开始"><a href="#2-7-枚举变量应该从-1-开始" class="headerlink" title="2.7 枚举变量应该从 1 开始"></a>2.7 枚举变量应该从 1 开始</h4><p>在 Go 语言中枚举值的声明典型方式是通过 <code>const</code> 和 <code>iota</code> 来声明。由于 0 是默认值，所以枚举值最好从一个非 0 值开始，比如 1。</p><p><strong>Bad</strong></p><pre><code>type Operation int  const (    Add Operation = iota    Subtract    Multiply  )  // Add=0, Subtract=1, Multiply=2  </code></pre><p><strong>Good</strong></p><pre><code>type Operation int  const (    Add Operation = iota + 1    Subtract    Multiply  )  // Add=1, Subtract=2, Multiply=3  </code></pre><p>有一种例外情况：0 值是预期的默认行为的时候，枚举值可以从 0 开始。</p><pre><code>type LogOutput int  const (    LogToStdout LogOutput = iota    LogToFile    LogToRemote  )  // LogToStdout=0, LogToFile=1, LogToRemote=2  </code></pre><h4 id="2-8-Error-类型"><a href="#2-8-Error-类型" class="headerlink" title="2.8 Error 类型"></a>2.8 Error 类型</h4><p>在 Go 语言中声明 error 可以有多种方式：</p><ul><li><code>errors.New</code> 声明包含简单静态字符串的 error</li><li><code>fmt.Errorf</code> 格式化 error string</li><li>其他自定义类型使用了 <code>Error()</code> 方法</li><li>使用 <code>&quot;pkg/errors&quot;.Wrap</code></li></ul><p>当要把 error 作为返回值的时候，可以考虑如下的处理方式</p><ul><li>是不是不需要额外信息，如果是，<code>errors.New</code> 就足够了。</li><li>client 需要检测和处理返回的 error 吗？如果是，最好使用实现了 <code>Error()</code> 方法的自定义类型，这样可以包含更多的信息。</li><li>error 是不是从下游函数传递过来的？如果是，考虑一下 error wrap，参考：<a href="https://github.com/uber-go/guide/blob/master/style.md#error-wrapping" target="_blank" rel="noopener">section on error wrapping</a>.</li><li>其他情况，<code>fmt.Errorf</code> 一般足够了。</li></ul><p>对于 client 需要检测和处理 error 的情况，这里详细说一下。如果你要通过 <code>errors.New</code> 声明一个简单的<br>error，那么可以使用一个变量声明：<code>var ErrCouldNotOpen = errors.New(&quot;Could not open&quot;)</code></p><p><strong>Bad</strong></p><pre><code>// package foo  func Open() error {    return errors.New(&quot;could not open&quot;)  }  // package bar  func use() {    if err := foo.Open(); err != nil {      if err.Error() == &quot;could not open&quot; {        // handle      } else {        panic(&quot;unknown error&quot;)      }    }  }  </code></pre><p><strong>Good</strong></p><pre><code>// package foo  var ErrCouldNotOpen = errors.New(&quot;could not open&quot;)  func Open() error {    return ErrCouldNotOpen  }  // package bar  if err := foo.Open(); err != nil {    if err == foo.ErrCouldNotOpen {      // handle    } else {      panic(&quot;unknown error&quot;)    }  }  </code></pre><p>如果需要 error 中包含更多的信息，而不仅仅类型原生 error 的这种简单字符串，那么最好使用一个自定义类型。</p><p><strong>Bad</strong></p><pre><code>func open(file string) error {    return fmt.Errorf(&quot;file %q not found&quot;, file)  }  func use() {    if err := open(); err != nil {      if strings.Contains(err.Error(), &quot;not found&quot;) {        // handle      } else {        panic(&quot;unknown error&quot;)      }    }  }  </code></pre><p><strong>Good</strong></p><pre><code>type errNotFound struct {    file string  }  func (e errNotFound) Error() string {    return fmt.Sprintf(&quot;file %q not found&quot;, e.file)  }  func open(file string) error {    return errNotFound{file: file}  }  func use() {    if err := open(); err != nil {      if _, ok := err.(errNotFound); ok {        // handle      } else {        panic(&quot;unknown error&quot;)      }    }  }  </code></pre><p>在直接暴露自定义的 error 类型的时候，最好 export 配套的检测自定义 error 类型的函数。</p><pre><code>// package foo  type errNotFound struct {    file string  }  func (e errNotFound) Error() string {    return fmt.Sprintf(&quot;file %q not found&quot;, e.file)  }  func IsNotFoundError(err error) bool {    _, ok := err.(errNotFound)    return ok  }  func Open(file string) error {    return errNotFound{file: file}  }  // package bar  if err := foo.Open(&quot;foo&quot;); err != nil {    if foo.IsNotFoundError(err) {      // handle    } else {      panic(&quot;unknown error&quot;)    }  }  </code></pre><h4 id="2-9-Error-Wrapping"><a href="#2-9-Error-Wrapping" class="headerlink" title="2.9 Error Wrapping"></a>2.9 Error Wrapping</h4><p>在函数调用失败的时候，有三种方式可以将下游的 error 传递出去：</p><ul><li>直接返回失败函数返回的 error。</li><li>使用 <code>&quot;pkg/errors&quot;.Wrap</code> 增加更多的上下文信息，这种情况下可以使用 <code>&quot;pkg/errors&quot;.Cause</code> 去提取原始的 error 信息。</li><li>如果调用者不需要检测和处理返回的 error 信息的话，可以直接使用 <code>fmt.Errorf</code> 将需要附加的信息进行格式化添加进去。</li></ul><p>如果条件允许，最好增加上下文信息。比如 “connection refused” 和 “call service foo: connection<br>refused” 这两种错误信息在可读性上比较也是高下立判。当增加上下文信息的时候，尽量保持简洁。比如像 “failed to”<br>这种极其明显的信息就没有必要写上去了。</p><p><strong>Bad</strong></p><pre><code>s, err := store.New()  if err != nil {      return fmt.Errorf(          &quot;failed to create new store: %s&quot;, err)  }  </code></pre><p><strong>Good</strong></p><pre><code>s, err := store.New()  if err != nil {      return fmt.Errorf(          &quot;new store: %s&quot;, err)  }  </code></pre><p>另外对于需要传播到其他系统的 error，也要有明显的标识信息，比如在 log 的最前面增加 <code>err</code> 等字样。</p><p>更多参考：[Don’t just check errors, handle them<br>gracefully](<a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-" target="_blank" rel="noopener">https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-</a><br>them-gracefully).</p><h4 id="2-10-类型转换失败处理"><a href="#2-10-类型转换失败处理" class="headerlink" title="2.10 类型转换失败处理"></a>2.10 类型转换失败处理</h4><p>类型转换失败会导致进程 panic，所以对于类型转换，一定要使用 “comma ok” 的范式来处理。</p><p><strong>Bad</strong></p><pre><code>t := i.(string)  </code></pre><p><strong>Good</strong></p><pre><code>t, ok := i.(string)  if !ok {    // handle the error gracefully  }  </code></pre><h4 id="2-11-不要-panic"><a href="#2-11-不要-panic" class="headerlink" title="2.11 不要 panic"></a>2.11 不要 panic</h4><p>对于线上环境要尽量避免 panic。在很多情况下，panic 都是引起雪崩效应的罪魁祸首。一旦 error 发生，我们应该向上游调用者返回<br>error，并且容许调用者对 error 进行检测和处理。</p><p><strong>Bad</strong></p><pre><code>func foo(bar string) {    if len(bar) == 0 {      panic(&quot;bar must not be empty&quot;)    }    // ...  }  func main() {    if len(os.Args) != 2 {      fmt.Println(&quot;USAGE: foo &lt;bar&gt;&quot;)      os.Exit(1)    }    foo(os.Args[1])  }   </code></pre><p><strong>Good</strong></p><pre><code>func foo(bar string) error {    if len(bar) == 0      return errors.New(&quot;bar must not be empty&quot;)    }    // ...    return nil  }  func main() {    if len(os.Args) != 2 {      fmt.Println(&quot;USAGE: foo &lt;bar&gt;&quot;)      os.Exit(1)    }    if err := foo(os.Args[1]); err != nil {      panic(err)    }  }  </code></pre><p>Panic/Recover 并不是一种 error 处理策略。进程只有在某些不可恢复的错误发生的时候才需要 panic。</p><p>在跑 test case 的时候，使用 <code>t.Fatal</code> 或者 <code>t.FailNow</code> ，而不是 panic 来保证这个 test case<br>会被标记为失败的。</p><p><strong>Bad</strong></p><pre><code>// func TestFoo(t *testing.T)  f, err := ioutil.TempFile(&quot;&quot;, &quot;test&quot;)  if err != nil {    panic(&quot;failed to set up test&quot;)  }  </code></pre><p><strong>Good</strong></p><pre><code>// func TestFoo(t *testing.T)  f, err := ioutil.TempFile(&quot;&quot;, &quot;test&quot;)  if err != nil {    t.Fatal(&quot;failed to set up test&quot;)  }  </code></pre><h4 id="2-12-使用-go-uber-org-atomic"><a href="#2-12-使用-go-uber-org-atomic" class="headerlink" title="2.12 使用 go.uber.org/atomic"></a>2.12 使用 go.uber.org/atomic</h4><p>这个是 Uber 内部对原生包 <code>sync/atomic</code> 的一种封装，隐藏了底层数据类型。</p><p><strong>Bad</strong></p><pre><code>type foo struct {    running int32  // atomic  }  func (f* foo) start() {    if atomic.SwapInt32(&amp;f.running, 1) == 1 {       // already running…       return    }    // start the Foo  }  func (f *foo) isRunning() bool {    return f.running == 1  // race!  }  </code></pre><p><strong>Good</strong></p><pre><code>type foo struct {    running atomic.Bool  }  func (f *foo) start() {    if f.running.Swap(true) {       // already running…       return    }    // start the Foo  }  func (f *foo) isRunning() bool {    return f.running.Load()  }  </code></pre><h3 id="3-性能相关"><a href="#3-性能相关" class="headerlink" title="3. 性能相关"></a>3. 性能相关</h3><h4 id="3-1-类型转换时，使用-strconv-替换-fmt"><a href="#3-1-类型转换时，使用-strconv-替换-fmt" class="headerlink" title="3.1 类型转换时，使用 strconv 替换 fmt"></a>3.1 类型转换时，使用 strconv 替换 fmt</h4><p>当基本类型和 string 互转的时候，<code>strconv</code> 要比 <code>fmt</code> 快。</p><p><strong>Bad</strong></p><pre><code>for i := 0; i &lt; b.N; i++ {    s := fmt.Sprint(rand.Int())  }  BenchmarkFmtSprint-4    143 ns/op    2 allocs/op  </code></pre><p><strong>Good</strong></p><pre><code>for i := 0; i &lt; b.N; i++ {    s := strconv.Itoa(rand.Int())  }  BenchmarkStrconv-4    64.2 ns/op    1 allocs/op  </code></pre><h4 id="3-2-避免-string-to-byte-的不必要频繁转换"><a href="#3-2-避免-string-to-byte-的不必要频繁转换" class="headerlink" title="3.2 避免 string to byte 的不必要频繁转换"></a>3.2 避免 string to byte 的不必要频繁转换</h4><p>在通过 string 创建 byte slice 的时候，不要在循环语句中重复的转换，而是要将重复的转换逻辑提到循环外面，做一次即可。(看上去很<br>general 的建议)</p><p><strong>Bad</strong></p><pre><code>for i := 0; i &lt; b.N; i++ {    w.Write([]byte(&quot;Hello world&quot;))  }  BenchmarkBad-4   50000000   22.2 ns/op  </code></pre><p><strong>Good</strong></p><pre><code>data := []byte(&quot;Hello world&quot;)  for i := 0; i &lt; b.N; i++ {    w.Write(data)  }  BenchmarkGood-4  500000000   3.25 ns/op  </code></pre><h3 id="4-编程风格"><a href="#4-编程风格" class="headerlink" title="4. 编程风格"></a>4. 编程风格</h3><h4 id="4-1-声明语句分组"><a href="#4-1-声明语句分组" class="headerlink" title="4.1 声明语句分组"></a>4.1 声明语句分组</h4><p>import 语句分组</p><p><strong>Bad</strong></p><pre><code>import &quot;a&quot;  import &quot;b&quot;  </code></pre><p><strong>Good</strong></p><pre><code>import (    &quot;a&quot;    &quot;b&quot;  )  </code></pre><p>常量、变量以及 type 声明</p><p><strong>Bad</strong></p><pre><code>const a = 1  const b = 2  var a = 1  var b = 2  type Area float64  type Volume float64  </code></pre><p><strong>Good</strong></p><pre><code>const (    a = 1    b = 2  )  var (    a = 1    b = 2  )  type (    Area float64    Volume float64  )  </code></pre><p>import 根据导入的包进行顺序分组。（其他库我们其实可以再细分 private 库和 public 库）</p><ul><li>标准库</li><li>其他库</li></ul><p><strong>Bad</strong></p><pre><code>import (    &quot;fmt&quot;    &quot;os&quot;    &quot;go.uber.org/atomic&quot;    &quot;golang.org/x/sync/errgroup&quot;  )  </code></pre><p><strong>Good</strong></p><pre><code>import (    &quot;fmt&quot;    &quot;os&quot;    &quot;go.uber.org/atomic&quot;    &quot;golang.org/x/sync/errgroup&quot;  )  </code></pre><h4 id="4-2-package-命名"><a href="#4-2-package-命名" class="headerlink" title="4.2 package 命名"></a>4.2 package 命名</h4><p>package 命名的几条规则：</p><ul><li>全小写。不包含大写字母或者下划线。</li><li>简洁。</li><li>不要使用复数。比如，使用 <code>net/url</code>，而不是 <code>net/urls</code>。</li><li>避免：”common”, “util”, “shared”, “lib”，不解释。</li></ul><p>更多参考：</p><ul><li><a href="https://blog.golang.org/package-names" target="_blank" rel="noopener">Package Names</a></li><li><a href="https://rakyll.org/style-packages/" target="_blank" rel="noopener">Style guideline for Go packages</a>.</li></ul><h4 id="4-3-函数命名"><a href="#4-3-函数命名" class="headerlink" title="4.3 函数命名"></a>4.3 函数命名</h4><p>函数命名遵从社区规范： <a href="https://golang.org/doc/effective_go.html#mixed-caps" target="_blank" rel="noopener">MixedCaps for function<br>names</a> 。有一种特例是 TestCase<br>中为了方便测试做的函数命名，比如：<code>TestMyFunction_WhatIsBeingTested</code>。</p><h4 id="4-4-import-别名"><a href="#4-4-import-别名" class="headerlink" title="4.4 import 别名"></a>4.4 import 别名</h4><p>当 package 的名字和 import 的 path 的最后一个元素不同的时候，必须要起别名。</p><pre><code>import (    &quot;net/http&quot;    client &quot;example.com/client-go&quot;    trace &quot;example.com/trace/v2&quot;  )  </code></pre><p>另外，import 别名要尽量避免，只要在不得不起别名的时候再这么做，比如避免冲突。</p><p><strong>Bad</strong></p><pre><code>import (    &quot;fmt&quot;    &quot;os&quot;    nettrace &quot;golang.net/x/trace&quot;  )  </code></pre><p><strong>Good</strong></p><pre><code>import (    &quot;fmt&quot;    &quot;os&quot;    &quot;runtime/trace&quot;    nettrace &quot;golang.net/x/trace&quot;  )  </code></pre><h4 id="4-5-函数分组和排序"><a href="#4-5-函数分组和排序" class="headerlink" title="4.5 函数分组和排序"></a>4.5 函数分组和排序</h4><ul><li>函数应该按调用顺序排序</li><li>一个文件中的函数应该按 receiver 排序</li></ul><p><code>newXYZ/NewXYZ</code> 最好紧接着类型声明后面，并在其他的 receiver 函数前面。</p><p><strong>Bad</strong></p><pre><code>func (s *something) Cost() {    return calcCost(s.weights)  }  type something struct{ ... }  func calcCost(n int[]) int {...}  func (s *something) Stop() {...}  func newSomething() *something {      return &amp;something{}  }  </code></pre><p><strong>Good</strong></p><pre><code>type something struct{ ... }  func newSomething() *something {      return &amp;something{}  }  func (s *something) Cost() {    return calcCost(s.weights)  }  func (s *something) Stop() {...}  func calcCost(n int[]) int {...}  </code></pre><h4 id="4-6-避免代码块嵌套"><a href="#4-6-避免代码块嵌套" class="headerlink" title="4.6 避免代码块嵌套"></a>4.6 避免代码块嵌套</h4><p>优先处理异常情况，快速返回，避免代码块过多嵌套。看下面代码会比较直观。</p><p><strong>Bad</strong></p><pre><code>for _, v := range data {    if v.F1 == 1 {      v = process(v)      if err := v.Call(); err == nil {        v.Send()      } else {        return err      }    } else {      log.Printf(&quot;Invalid v: %v&quot;, v)    }  }  </code></pre><p><strong>Good</strong></p><pre><code>for _, v := range data {    if v.F1 != 1 {      log.Printf(&quot;Invalid v: %v&quot;, v)      continue    }    v = process(v)    if err := v.Call(); err != nil {      return err    }    v.Send()  }  </code></pre><h4 id="4-7-避免不必要的-else-语句"><a href="#4-7-避免不必要的-else-语句" class="headerlink" title="4.7 避免不必要的 else 语句"></a>4.7 避免不必要的 else 语句</h4><p>很多情况下，if - else 语句都能通过一个 if 语句表达，比如如下代码。</p><p><strong>Bad</strong></p><pre><code>var a int  if b {    a = 100  } else {    a = 10  }  </code></pre><p><strong>Good</strong></p><pre><code>a := 10  if b {    a = 100  }  </code></pre><h4 id="4-8-两级-two-level-变量声明"><a href="#4-8-两级-two-level-变量声明" class="headerlink" title="4.8 两级 (two-level) 变量声明"></a>4.8 两级 (two-level) 变量声明</h4><p>所有两级变量声明就是一个声明的右值来自另一个表达式，这个时候第一级变量声明就不需要指明类型，除非这两个地方的数据类型不同。看代码会更直观一点。</p><p><strong>Bad</strong></p><pre><code>var _s string = F()  func F() string { return &quot;A&quot; }  </code></pre><p><strong>Good</strong></p><pre><code>var _s = F()  // Since F already states that it returns a string, we don&apos;t need to specify  // the type again.  func F() string { return &quot;A&quot; }  </code></pre><p>上面说的第二种两边数据类型不同的情况。</p><pre><code>type myError struct{}  func (myError) Error() string { return &quot;error&quot; }  func F() myError { return myError{} }  var _e error = F()  // F returns an object of type myError but we want error.  </code></pre><h4 id="4-9-对于不做-export-的全局变量使用前缀"><a href="#4-9-对于不做-export-的全局变量使用前缀" class="headerlink" title="4.9 对于不做 export 的全局变量使用前缀 _"></a>4.9 对于不做 export 的全局变量使用前缀 _</h4><p>对于同一个 package 下面的多个文件，一个文件中的全局变量可能会被其他文件误用，所以建议使用 _ 来做前缀。（其实这条规则有待商榷）</p><p><strong>Bad</strong></p><pre><code>// foo.go  const (    defaultPort = 8080    defaultUser = &quot;user&quot;  )  // bar.go  func Bar() {    defaultPort := 9090    ...    fmt.Println(&quot;Default port&quot;, defaultPort)    // We will not see a compile error if the first line of    // Bar() is deleted.  }  </code></pre><p><strong>Good</strong></p><pre><code>// foo.go  const (    _defaultPort = 8080    _defaultUser = &quot;user&quot;  )  </code></pre><h4 id="4-10-struct-嵌套"><a href="#4-10-struct-嵌套" class="headerlink" title="4.10 struct 嵌套"></a>4.10 struct 嵌套</h4><p>struct 中的嵌套类型在 field 列表排在最前面，并且用空行分隔开。</p><p><strong>Bad</strong></p><pre><code>type Client struct {    version int    http.Client  }  </code></pre><p><strong>Good</strong></p><pre><code>type Client struct {    http.Client    version int  }  </code></pre><h4 id="4-11-struct-初始化的时候带上-Field"><a href="#4-11-struct-初始化的时候带上-Field" class="headerlink" title="4.11 struct 初始化的时候带上 Field"></a>4.11 struct 初始化的时候带上 Field</h4><p>这样会更清晰，也是 go vet 鼓励的方式</p><p><strong>Bad</strong></p><pre><code>k := User{&quot;John&quot;, &quot;Doe&quot;, true}  </code></pre><p><strong>Good</strong></p><pre><code>k := User{      FirstName: &quot;John&quot;,      LastName: &quot;Doe&quot;,      Admin: true,  }  </code></pre><h4 id="4-12-局部变量声明"><a href="#4-12-局部变量声明" class="headerlink" title="4.12 局部变量声明"></a>4.12 局部变量声明</h4><p>变量声明的时候可以使用 <code>:=</code> 以表示这个变量被显示的设置为某个值。</p><p><strong>Bad</strong></p><pre><code>var s = &quot;foo&quot;  </code></pre><p><strong>Good</strong></p><pre><code>s := &quot;foo&quot;  </code></pre><p>但是对于某些情况使用 var 反而表示的更清晰，比如声明一个空的 slice: [Declaring Empty<br>Slices](<a href="https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-" target="_blank" rel="noopener">https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-</a><br>slices)</p><p><strong>Bad</strong></p><pre><code>func f(list []int) {    filtered := []int{}    for _, v := range list {      if v &gt; 10 {        filtered = append(filtered, v)      }    }  }  </code></pre><p><strong>Good</strong></p><pre><code>func f(list []int) {    var filtered []int    for _, v := range list {      if v &gt; 10 {        filtered = append(filtered, v)      }    }  }  </code></pre><h4 id="4-13-nil-是合法的-slice"><a href="#4-13-nil-是合法的-slice" class="headerlink" title="4.13 nil 是合法的 slice"></a>4.13 nil 是合法的 slice</h4><p>在返回值是 slice 类型的时候，直接返回 nil 即可，不需要显式地返回长度为 0 的 slice。</p><p><strong>Bad</strong></p><pre><code>if x == &quot;&quot; {    return []int{}  }  </code></pre><p><strong>Good</strong></p><pre><code>if x == &quot;&quot; {    return nil  }  </code></pre><p>判断 slice 是不是空的时候，使用 <code>len(s) == 0</code>。</p><p><strong>Bad</strong></p><pre><code>func isEmpty(s []string) bool {    return s == nil  }  </code></pre><p><strong>Good</strong></p><pre><code>func isEmpty(s []string) bool {    return len(s) == 0  }  </code></pre><p>使用 var 声明的 slice 空值可以直接使用，不需要 <code>make()</code>。</p><p><strong>Bad</strong></p><pre><code>nums := []int{}  // or, nums := make([]int)  if add1 {    nums = append(nums, 1)  }  if add2 {    nums = append(nums, 2)  }  </code></pre><p><strong>Good</strong></p><pre><code>var nums []int  if add1 {    nums = append(nums, 1)  }  if add2 {    nums = append(nums, 2)  }  </code></pre><h4 id="4-14-避免-scope"><a href="#4-14-避免-scope" class="headerlink" title="4.14 避免 scope"></a>4.14 避免 scope</h4><p> <strong>Bad</strong></p><pre><code>err := ioutil.WriteFile(name, data, 0644)  if err != nil {   return err  }  </code></pre><p><strong>Good</strong></p><pre><code>if err := ioutil.WriteFile(name, data, 0644); err != nil {   return err  }  </code></pre><p>当然某些情况下，scope 是不可避免的，比如</p><p><strong>Bad</strong></p><pre><code>if data, err := ioutil.ReadFile(name); err == nil {    err = cfg.Decode(data)    if err != nil {      return err    }    fmt.Println(cfg)    return nil  } else {    return err  }  </code></pre><p><strong>Good</strong></p><pre><code>data, err := ioutil.ReadFile(name)  if err != nil {     return err  }  if err := cfg.Decode(data); err != nil {    return err  }  fmt.Println(cfg)  return nil  </code></pre><h4 id="4-15-避免参数语义不明确（Avoid-Naked-Parameters）"><a href="#4-15-避免参数语义不明确（Avoid-Naked-Parameters）" class="headerlink" title="4.15 避免参数语义不明确（Avoid Naked Parameters）"></a>4.15 避免参数语义不明确（Avoid Naked Parameters）</h4><p>Naked Parameter 指的应该是意义不明确的参数，这种情况会破坏代码的可读性，可以使用 C 分格的注释（<code>/*...*/</code>）进行注释。</p><p><strong>Bad</strong></p><pre><code>// func printInfo(name string, isLocal, done bool)  printInfo(&quot;foo&quot;, true, true)  </code></pre><p><strong>Good</strong></p><pre><code>// func printInfo(name string, isLocal, done bool)  printInfo(&quot;foo&quot;, true /* isLocal */, true /* done */)  </code></pre><p>对于上面的示例代码，还有一种更好的处理方式是将上面的 bool 类型换成自定义类型。</p><pre><code>type Region int  const (    UnknownRegion Region = iota    Local  )  type Status int  const (    StatusReady = iota + 1    StatusDone    // Maybe we will have a StatusInProgress in the future.  )  func printInfo(name string, region Region, status Status)  </code></pre><h4 id="4-16-使用原生字符串，避免转义"><a href="#4-16-使用原生字符串，避免转义" class="headerlink" title="4.16 使用原生字符串，避免转义"></a>4.16 使用原生字符串，避免转义</h4><p>Go 支持使用反引号，也就是 “`” 来表示原生字符串，在需要转义的场景下，我们应该尽量使用这种方案来替换。</p><p><strong>Bad</strong></p><pre><code>wantError := &quot;unknown name:\&quot;test\&quot;&quot;  </code></pre><p><strong>Good</strong></p><pre><code>wantError := `unknown error:&quot;test&quot;`  </code></pre><h4 id="4-17-Struct-引用初始化"><a href="#4-17-Struct-引用初始化" class="headerlink" title="4.17 Struct 引用初始化"></a>4.17 Struct 引用初始化</h4><p>使用 <code>&amp;T{}</code> 而不是 <code>new(T)</code> 来声明对 T 类型的引用，使用 <code>&amp;T{}</code> 的方式我们可以和 struct 声明方式 <code>T{}</code> 保持统一。</p><p><strong>Bad</strong></p><pre><code>sval := T{Name: &quot;foo&quot;}  // inconsistent  sptr := new(T)  sptr.Name = &quot;bar&quot;  </code></pre><p><strong>Good</strong></p><pre><code>sval := T{Name: &quot;foo&quot;}  sptr := &amp;T{Name: &quot;bar&quot;}  </code></pre><h4 id="4-18-字符串-string-format"><a href="#4-18-字符串-string-format" class="headerlink" title="4.18 字符串 string format"></a>4.18 字符串 string format</h4><p>如果我们要在 Printf 外面声明 format 字符串的话，使用 const，而不是变量，这样 go vet 可以对 format 字符串做静态分析。</p><p><strong>Bad</strong></p><pre><code>msg := &quot;unexpected values %v, %v\n&quot;  fmt.Printf(msg, 1, 2)  </code></pre><p><strong>Good</strong></p><pre><code>const msg = &quot;unexpected values %v, %v\n&quot;  fmt.Printf(msg, 1, 2)  </code></pre><h4 id="4-19-Printf-风格函数命名"><a href="#4-19-Printf-风格函数命名" class="headerlink" title="4.19 Printf 风格函数命名"></a>4.19 Printf 风格函数命名</h4><p>当声明 <code>Printf</code> 风格的函数时，确保 <code>go vet</code> 可以对其进行检测。可以参考：<a href="https://golang.org/cmd/vet/#hdr-Printf_family" target="_blank" rel="noopener">Printf<br>family</a> 。</p><p>另外也可以在函数名字的结尾使用 f 结尾，比如: <code>WrapF</code>，而不是 <code>Wrap</code>。然后使用 <code>go vet</code></p><pre><code>$ go vet -printfuncs=wrapf,statusf  </code></pre><p>更多参考: <a href="https://kuzminva.wordpress.com/2017/11/07/go-vet-printf-family-check/" target="_blank" rel="noopener">go vet: Printf family<br>check</a>.</p><h3 id="5-编程模式（Patterns）"><a href="#5-编程模式（Patterns）" class="headerlink" title="5. 编程模式（Patterns）"></a>5. 编程模式（Patterns）</h3><h4 id="5-1-Test-Tables"><a href="#5-1-Test-Tables" class="headerlink" title="5.1 Test Tables"></a>5.1 Test Tables</h4><p>当测试逻辑是重复的时候，通过 <a href="https://blog.golang.org/subtests" target="_blank" rel="noopener">subtests</a> 使用 table 驱动的方式编写<br>case 代码看上去会更简洁。</p><p><strong>Bad</strong></p><pre><code>// func TestSplitHostPort(t *testing.T)  host, port, err := net.SplitHostPort(&quot;192.0.2.0:8000&quot;)  require.NoError(t, err)  assert.Equal(t, &quot;192.0.2.0&quot;, host)  assert.Equal(t, &quot;8000&quot;, port)  host, port, err = net.SplitHostPort(&quot;192.0.2.0:http&quot;)  require.NoError(t, err)  assert.Equal(t, &quot;192.0.2.0&quot;, host)  assert.Equal(t, &quot;http&quot;, port)  host, port, err = net.SplitHostPort(&quot;:8000&quot;)  require.NoError(t, err)  assert.Equal(t, &quot;&quot;, host)  assert.Equal(t, &quot;8000&quot;, port)  host, port, err = net.SplitHostPort(&quot;1:8&quot;)  require.NoError(t, err)  assert.Equal(t, &quot;1&quot;, host)  assert.Equal(t, &quot;8&quot;, port)  </code></pre><p><strong>Good</strong></p><pre><code>// func TestSplitHostPort(t *testing.T)  tests := []struct{    give     string    wantHost string    wantPort string  }{    {      give:     &quot;192.0.2.0:8000&quot;,      wantHost: &quot;192.0.2.0&quot;,      wantPort: &quot;8000&quot;,    },    {      give:     &quot;192.0.2.0:http&quot;,      wantHost: &quot;192.0.2.0&quot;,      wantPort: &quot;http&quot;,    },    {      give:     &quot;:8000&quot;,      wantHost: &quot;&quot;,      wantPort: &quot;8000&quot;,    },    {      give:     &quot;1:8&quot;,      wantHost: &quot;1&quot;,      wantPort: &quot;8&quot;,    },  }  for _, tt := range tests {    t.Run(tt.give, func(t *testing.T) {      host, port, err := net.SplitHostPort(tt.give)      require.NoError(t, err)      assert.Equal(t, tt.wantHost, host)      assert.Equal(t, tt.wantPort, port)    })  }  </code></pre><p>—|—  </p><p>很明显，使用 test table 的方式在代码逻辑扩展的时候，比如新增 test case，都会显得更加的清晰。</p><p>在命名方面，我们将 struct 的 slice 命名为 <code>tests</code>，同时每一个 test case 命名为 <code>tt</code>。而且，我们强烈建议通过<br><code>give</code> 和 <code>want</code> 前缀来表示 test case 的 input 和 output 的值。</p><pre><code>tests := []struct{    give     string    wantHost string    wantPort string  }{    // ...  }  for _, tt := range tests {    // ...  }  </code></pre><h4 id="5-2-Functional-Options"><a href="#5-2-Functional-Options" class="headerlink" title="5.2 Functional Options"></a>5.2 Functional Options</h4><p>关于 functional options 简单来说就是通过类似闭包的方式来进行函数传参。</p><p><strong>Bad</strong></p><pre><code>// package db  func Connect(    addr string,    timeout time.Duration,    caching bool,  ) (*Connection, error) {    // ...  }  // Timeout and caching must always be provided,  // even if the user wants to use the default.  db.Connect(addr, db.DefaultTimeout, db.DefaultCaching)  db.Connect(addr, newTimeout, db.DefaultCaching)  db.Connect(addr, db.DefaultTimeout, false /* caching */)  db.Connect(addr, newTimeout, false /* caching */)  </code></pre><p><strong>Good</strong></p><pre><code>type options struct {    timeout time.Duration    caching bool  }  // Option overrides behavior of Connect.  type Option interface {    apply(*options)  }  type optionFunc func(*options)  func (f optionFunc) apply(o *options) {    f(o)  }  func WithTimeout(t time.Duration) Option {    return optionFunc(func(o *options) {      o.timeout = t    })  }  func WithCaching(cache bool) Option {    return optionFunc(func(o *options) {      o.caching = cache    })  }  // Connect creates a connection.  func Connect(    addr string,    opts ...Option,  ) (*Connection, error) {    options := options{      timeout: defaultTimeout,      caching: defaultCaching,    }    for _, o := range opts {      o.apply(&amp;options)    }    // ...  }  // Options must be provided only if needed.  db.Connect(addr)  db.Connect(addr, db.WithTimeout(newTimeout))  db.Connect(addr, db.WithCaching(false))  db.Connect(    addr,    db.WithCaching(false),    db.WithTimeout(newTimeout),  )  </code></pre><p>—|—  </p><p>更多参考：</p><ul><li><a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html" target="_blank" rel="noopener">Self-referential functions and the design of options</a></li><li><a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis" target="_blank" rel="noopener">Functional options for friendly APIs</a></li></ul><p>注：关于 functional option 这种方式我本人也强烈推荐，我很久以前也写过一篇类似的文章，感兴趣的可以移步：<br><a href="http://legendtkl.com/2016/11/05/code-scalability/" target="_blank" rel="noopener">写扩展性好的代码：函数</a></p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>Uber 开源的这个文档，通篇读下来给我印象最深的就是：保持代码简洁，并具有良好可读性。不得不说，相比于国内很多 “代码能跑就完事了”<br>这种写代码的态度，这篇文章或许可以给我们更多的启示和参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Go-语言编程规范&quot;&gt;&lt;a href=&quot;#Go-语言编程规范&quot; class=&quot;headerlink&quot; title=&quot;Go 语言编程规范&quot;&gt;&lt;/a&gt;Go 语言编程规范&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文翻译自 Uber 在 github 上面开源的 Go 
      
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/15/hello-world/"/>
    <id>http://yoursite.com/2020/01/15/hello-world/</id>
    <published>2020-01-15T08:16:22.317Z</published>
    <updated>2020-01-15T08:16:22.317Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
